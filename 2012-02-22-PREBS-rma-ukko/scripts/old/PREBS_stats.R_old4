#! /usr/bin/Rscript 

source("/triton/ics/scratch/uzielak1/general_scripts/my_plot.R")
cargs <- commandArgs(trailingOnly = TRUE)

output_dir <- cargs[1]
collapse <- log2(as.numeric(cargs[2]))
alpha <- log2(as.numeric(cargs[3]))
my_quantile <- as.numeric(cargs[4])
mode <- cargs[5]
merged_files <- cargs # all merged_with_rma.RData files

prebs_cors1 <- NULL
mmseq_cors1 <- NULL
rpkm_cors1 <- NULL

prebs_cors2 <- NULL
mmseq_cors2 <- NULL
rpkm_cors2 <- NULL

prebs_raw_cors <- NULL
mmseq_raw_cors <- NULL

sample_names <- NULL

#collapse <- log2(0.6)

for (i in 6:length(merged_files)) {
	load(merged_files[i])
	
	#sample_name <- strsplit(merged_files[i], "/")
	#sample_name <- tail(sample_name[[1]], 1)
	sample_name <- basename(merged_files[i])
	sample_name <- strsplit(sample_name, "_")
	sample_name <- sample_name[[1]][1]
	
	sample_names <- c(sample_names, sample_name)
	
	merged_filtered <- merged_with_rma

	if ((mode == "FILTER") || (mode == "SEPARATE_Q_FILTER")) {
		merged_filtered <- merged_filtered[!is.na(merged_filtered$mmseq_expr),]
		merged_filtered <- merged_filtered[!is.na(merged_filtered$RPKM),]		
		merged_filtered <- merged_filtered[merged_filtered$mmseq_expr > collapse,]
		merged_filtered <- merged_filtered[merged_filtered$RPKM > collapse,]
		merged_filtered <- merged_filtered[merged_filtered$PREBS_RMA > alpha,]
	}
		
	if ((mode == "COLLAPSE") || (mode == "FILTER_ARR") || (mode == "FILTER_SEQ") || (mode == "SEPARATE_Q")) {
		merged_filtered$mmseq_expr[is.na(merged_filtered$mmseq_expr)] <- collapse
		merged_filtered$RPKM[is.na(merged_filtered$RPKM)] <- collapse
		merged_filtered$mmseq_expr[merged_filtered$mmseq_expr < collapse] <- collapse
		merged_filtered$RPKM[merged_filtered$RPKM < collapse] <- collapse
	}
	
	if (mode == "FILTER_ARR") {
		merged_filtered <- merged_filtered[merged_filtered$array_expr >= quantile(merged_filtered$array_expr, my_quantile) - 0.001,]
	}
	
	if (mode == "FILTER_SEQ") {
		q1 <- quantile(merged_filtered$RPKM, my_quantile) - 0.001
		q2 <- quantile(merged_filtered$mmseq_expr, my_quantile) - 0.001
		q3 <- quantile(merged_filtered$PREBS_RMA, my_quantile) - 0.001
		
		merged_filtered <- merged_filtered[merged_filtered$RPKM > q1,]
		merged_filtered <- merged_filtered[merged_filtered$mmseq_expr > q2,]
		merged_filtered <- merged_filtered[merged_filtered$PREBS_RMA > q3,]
	}
	
	if ((mode == "SEPARATE_Q") || (mode == "SEPARATE_Q_FILTER")) {
		q1 <- quantile(merged_filtered$array_expr, my_quantile) - 0.001
		q2 <- quantile(merged_filtered$array_expr, my_quantile + 0.2) + 0.001
		merged_filtered <- merged_filtered[(merged_filtered$array_expr > q1) & (merged_filtered$array_expr < q2),]
	}
	
	# save correlations
	prebs_cors1 <- c(prebs_cors1, cor(merged_filtered$PREBS_RMA, merged_filtered$array_expr))
	prebs_cors2 <- c(prebs_cors2, cor(merged_filtered$PREBS_RMA, merged_filtered$array_expr, method="spearman"))
	my_plot(merged_filtered$PREBS_RMA, merged_filtered$array_expr, paste(output_dir,"/plots/",sample_name,"_PREBS_RMA_vs_array.png", sep=""), "PREBS_RMA value", "Microarray expression")

	mmseq_cors1 <- c(mmseq_cors1, cor(merged_filtered$mmseq_expr, merged_filtered$array_expr))
	mmseq_cors2 <- c(mmseq_cors2, cor(merged_filtered$mmseq_expr, merged_filtered$array_expr, method="spearman"))
	mmseq_raw_cors <- c(mmseq_raw_cors, cor(merged_filtered$mmseq_expr, merged_filtered$Probes_mean_raw))
	my_plot(merged_filtered$mmseq_expr, merged_filtered$array_expr, paste(output_dir,"/plots/",sample_name,"_mmseq_vs_array.png", sep=""), "MMseq expression (log2 scale)", "Microarray expression")

	rpkm_cors1  <- c(rpkm_cors1, cor(merged_filtered$RPKM, merged_filtered$array_expr))
	rpkm_cors2  <- c(rpkm_cors2, cor(merged_filtered$RPKM, merged_filtered$array_expr, method="spearman"))
	my_plot(merged_filtered$RPKM, merged_filtered$array_expr, paste(output_dir,"/plots/",sample_name,"_RPKM_vs_array.png", sep=""), "RPKM (log2 scale)", "Microarray expression")	
	
	
}

table_dir <- paste(output_dir, "/tables", sep="")

rpkm_cors  <- c(round(mean(rpkm_cors1),2), round(mean(rpkm_cors2), 2))
mmseq_cors <- c(round(mean(mmseq_cors1),2), round(mean(mmseq_cors2),2))
prebs_cors <- c(round(mean(prebs_cors1),2), round(mean(prebs_cors2),2))

output_table <- data.frame(RPKM=rpkm_cors, MMSEQ=mmseq_cors, PREBS=prebs_cors)
rownames(output_table) <- c("Pearson cor.", "Spearman cor.")
write.table(output_table, file=paste(table_dir, "/prebs_stats.csv", sep=""), sep=",", quote=FALSE)

improve1 <- 100 * round((mean(prebs_cors1) - mean(mmseq_cors1)) / (1-mean(mmseq_cors1)),4)
improve_rpkm1 <- 100 * round((mean(prebs_cors1) - mean(rpkm_cors1)) / (1-mean(rpkm_cors1)),4)

improve2 <- 100 * round((mean(prebs_cors2) - mean(mmseq_cors2)) / (1-mean(mmseq_cors2)),4)
improve_rpkm2 <- 100 * round((mean(prebs_cors2) - mean(rpkm_cors2)) / (1-mean(rpkm_cors2)),4)

improve_table <- data.frame(Improvement_RPKM=c(improve_rpkm1, improve_rpkm2), Improvement_MMSEQ=c(improve1, improve2))
rownames(improve_table) <- c("Pearson cor.", "Spearman cor.")
write.table(improve_table, file=paste(table_dir, "/prebs_improve.csv", sep=""), sep=",", quote=FALSE)

#print(sample_names)
#print(sort(prebs_cors1, index.return=TRUE)$ix)
#print(sort(mmseq_cors1, index.return=TRUE)$ix)



